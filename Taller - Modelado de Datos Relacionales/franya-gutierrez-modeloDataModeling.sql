/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 15.0 		*/
/*  Created On : 08-oct-2025 23:28:36 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Factura_Detalle_Factura]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Detalle_Factura] DROP CONSTRAINT [FK_Factura_Detalle_Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Empleado_Empresa]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Empleado] DROP CONSTRAINT [FK_Empleado_Empresa]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Empleado_Factura]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Factura] DROP CONSTRAINT [FK_Empleado_Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Empresa_Factura]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Factura] DROP CONSTRAINT [FK_Empresa_Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Pago_Factura]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Pago] DROP CONSTRAINT [FK_Pago_Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Detalle_Factura_Producto]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Producto] DROP CONSTRAINT [FK_Detalle_Factura_Producto]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Proveedor_Producto]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Producto] DROP CONSTRAINT [FK_Proveedor_Producto]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Detalle_Factura]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Detalle_Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Empleado]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Empleado]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Empresa]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Empresa]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Factura]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Factura]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Pago]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Pago]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Producto]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Producto]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Proveedor]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Proveedor]
GO

/* Create Tables */

CREATE TABLE [Detalle_Factura]
(
	[detalleID] int NOT NULL,
	[productoID] int NOT NULL,
	[facturaID] int NOT NULL,
	[cantidad] int NOT NULL,
	[precioVenta] money NOT NULL,
	[subtotalLinea] money NOT NULL
)
GO

CREATE TABLE [Empleado]
(
	[empleadoID] int NOT NULL,
	[nombreEmpleado] varchar(50) NOT NULL,
	[rol] varchar(50) NULL,
	[RUC] varchar(15) NOT NULL
)
GO

CREATE TABLE [Empresa]
(
	[RUC] varchar(15) NOT NULL,
	[nombreNegocio] varchar(100) NOT NULL,
	[direccionNegocio] varchar(100) NOT NULL,
	[telefono] varchar(15) NULL
)
GO

CREATE TABLE [Factura]
(
	[facturaID] int NOT NULL,
	[folio] varchar(50) NOT NULL,
	[empleadoID] int NOT NULL,
	[fechaHora] date NOT NULL,
	[total] money NOT NULL,
	[RUC] varchar(15) NOT NULL,
	[turno] varchar(50) NULL
)
GO

CREATE TABLE [Pago]
(
	[pagoID] int NOT NULL,
	[metodoPago] nvarchar(20) NOT NULL,
	[facturaID] int NOT NULL,
	[montoPago] money NOT NULL,
	[referencia] nvarchar(50) NULL
)
GO

CREATE TABLE [Producto]
(
	[productoID] int NOT NULL,
	[precioUnitario] money NOT NULL,
	[nombreProducto] varchar(50) NOT NULL,
	[proveedorID] int NULL,
	[detalleID] int NOT NULL
)
GO

CREATE TABLE [Proveedor]
(
	[proveedorID] int NOT NULL,
	[nombreProveedor] varchar(50) NOT NULL,
	[RUC] varchar(15) NULL,
	[telefono] varchar(15) NULL
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [Detalle_Factura] 
 ADD CONSTRAINT [PK_Detalle_Factura]
	PRIMARY KEY CLUSTERED ([detalleID] ASC)
GO

ALTER TABLE [Empleado] 
 ADD CONSTRAINT [PK_Empleado]
	PRIMARY KEY CLUSTERED ([empleadoID] ASC)
GO

ALTER TABLE [Empresa] 
 ADD CONSTRAINT [PK_Empresa]
	PRIMARY KEY CLUSTERED ([RUC] ASC)
GO

ALTER TABLE [Factura] 
 ADD CONSTRAINT [PK_Factura]
	PRIMARY KEY CLUSTERED ([facturaID] ASC)
GO

ALTER TABLE [Pago] 
 ADD CONSTRAINT [PK_Pago]
	PRIMARY KEY CLUSTERED ([pagoID] ASC)
GO

ALTER TABLE [Producto] 
 ADD CONSTRAINT [PK_Producto]
	PRIMARY KEY CLUSTERED ([productoID] ASC)
GO

ALTER TABLE [Proveedor] 
 ADD CONSTRAINT [PK_Proveedor]
	PRIMARY KEY CLUSTERED ([proveedorID] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [Detalle_Factura] ADD CONSTRAINT [FK_Factura_Detalle_Factura]
	FOREIGN KEY ([facturaID]) REFERENCES [Factura] ([facturaID]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Empleado] ADD CONSTRAINT [FK_Empleado_Empresa]
	FOREIGN KEY ([RUC]) REFERENCES [Empresa] ([RUC]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Factura] ADD CONSTRAINT [FK_Empleado_Factura]
	FOREIGN KEY ([empleadoID]) REFERENCES [Empleado] ([empleadoID]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Factura] ADD CONSTRAINT [FK_Empresa_Factura]
	FOREIGN KEY ([RUC]) REFERENCES [Empresa] ([RUC]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Pago] ADD CONSTRAINT [FK_Pago_Factura]
	FOREIGN KEY ([facturaID]) REFERENCES [Factura] ([facturaID]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Producto] ADD CONSTRAINT [FK_Detalle_Factura_Producto]
	FOREIGN KEY ([detalleID]) REFERENCES [Detalle_Factura] ([detalleID]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Producto] ADD CONSTRAINT [FK_Proveedor_Producto]
	FOREIGN KEY ([proveedorID]) REFERENCES [Proveedor] ([proveedorID]) ON DELETE No Action ON UPDATE No Action
GO

/* Create Table Comments */

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Detalle_Factura', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'corresponde al detalle de cada uno de los productos a comprar que apreceran en la factura. Ideal para evitar problems de redundancia con la relacion de Muchos a Muchos', 'SCHEMA', 'dbo', 'table', 'Detalle_Factura' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'corresponde al detalle de cada uno de los productos a comprar que apreceran en la factura. Ideal para evitar problems de redundancia con la relacion de Muchos a Muchos', 'SCHEMA', 'dbo', 'table', 'Detalle_Factura' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Empleado', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Puesto que en la factura se imprime el nombre del cajero, se decidió poner este campo como una entidad. Pues una emprese puede contar con un personal algo extenso, y de esta forma, podrán asignar a la persona que estuvo encargada de hacer la facturación de productos. De esta forma también se evitan futuros posibles problemas legales.', 'SCHEMA', 'dbo', 'table', 'Empleado' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Puesto que en la factura se imprime el nombre del cajero, se decidió poner este campo como una entidad. Pues una emprese puede contar con un personal algo extenso, y de esta forma, podrán asignar a la persona que estuvo encargada de hacer la facturación de productos. De esta forma también se evitan futuros posibles problemas legales.', 'SCHEMA', 'dbo', 'table', 'Empleado' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Empresa', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Esta entidad surge debido a que se contemplan datos en la factura que deben ser ingresados para su impresión.

A como son: 
- EL RUC del negocio
- Direccion
- Nombre de la empresa 
- Y demás

Estos aspectos son cruciales en la impresión de todas las facturas impresas, por lo que se decidió implementar como una entidad por aparte de factura.', 'SCHEMA', 'dbo', 'table', 'Empresa' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Esta entidad surge debido a que se contemplan datos en la factura que deben ser ingresados para su impresión.

A como son: 
- EL RUC del negocio
- Direccion
- Nombre de la empresa 
- Y demás

Estos aspectos son cruciales en la impresión de todas las facturas impresas, por lo que se decidió implementar como una entidad por aparte de factura.', 'SCHEMA', 'dbo', 'table', 'Empresa' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Factura', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La entidad de factura representa la transacción a realizar. Esta entidad representa el hecho de que llega a ocurrir la compra de ciertos productos.', 'SCHEMA', 'dbo', 'table', 'Factura' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La entidad de factura representa la transacción a realizar. Esta entidad representa el hecho de que llega a ocurrir la compra de ciertos productos.', 'SCHEMA', 'dbo', 'table', 'Factura' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Pago', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Pueden haber distintos metodos de pago, por eso es escencial definir esta clase, pues el usuario puede especificar pagar cierta cantidad en efectio y cierta cantidad con tarjeta.

Tambien dependiendo del negoccio podria llegar a pagar hasta con una tarjeta de descuento.', 'SCHEMA', 'dbo', 'table', 'Pago' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Pueden haber distintos metodos de pago, por eso es escencial definir esta clase, pues el usuario puede especificar pagar cierta cantidad en efectio y cierta cantidad con tarjeta.

Tambien dependiendo del negoccio podria llegar a pagar hasta con una tarjeta de descuento.', 'SCHEMA', 'dbo', 'table', 'Pago' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Producto', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Representa todos los productos ingresados a la tienda. Estos prontos a vender', 'SCHEMA', 'dbo', 'table', 'Producto' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Representa todos los productos ingresados a la tienda. Estos prontos a vender', 'SCHEMA', 'dbo', 'table', 'Producto' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Proveedor', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Si bien, en la factura no se contempla esto. es IMPORTANTE contemplarlo en el modelo, pues de esta forma la empresa puede llevar un control de todos los (si acaso) distintos proveedores que suplen diversos productos.', 'SCHEMA', 'dbo', 'table', 'Proveedor' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Si bien, en la factura no se contempla esto. es IMPORTANTE contemplarlo en el modelo, pues de esta forma la empresa puede llevar un control de todos los (si acaso) distintos proveedores que suplen diversos productos.', 'SCHEMA', 'dbo', 'table', 'Proveedor' 
end
GO
